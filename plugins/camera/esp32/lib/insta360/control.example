#include "BLEDevice.h"

static BLEUUID serviceUUID_80("0000be80-0000-1000-8000-00805f9b34fb");
static BLEUUID    charUUID_81("0000be81-0000-1000-8000-00805f9b34fb");
static BLEUUID    charUUID_82("0000be82-0000-1000-8000-00805f9b34fb");

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = false;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLERemoteCharacteristic* pRemoteCharacteristic2;
static BLEAdvertisedDevice* myDevice;

static void notifyCallback( BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
    static uint8_t data [200];
    if(memcmp(data, pData, length) != 0){
      memcpy(data, pData, length); // save for comparison
      process_cmd(pData, length);
    }
}

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    Serial.println("onDisconnect");
  }
};

bool connectToServer() {
    Serial.print("Forming a connection to ");
    Serial.println(myDevice->getAddress().toString().c_str());
    BLEClient*  pClient  = BLEDevice::createClient();
    Serial.println(" - Created client");
    pClient->setClientCallbacks(new MyClientCallback());
    pClient->connect(myDevice);
    Serial.println(" - Connected to server");
    pClient->setMTU(517);
  
    BLERemoteService* pRemoteService = pClient->getService(serviceUUID_80);
    if (pRemoteService == nullptr) {
      Serial.print("Failed to find our service UUID: ");
      Serial.println(serviceUUID_80.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.println(" - Found our service");
    pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID_81);
    if (pRemoteCharacteristic == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(charUUID_81.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.println(" - Found our characteristic");
    if(pRemoteCharacteristic->canRead()) {
      std::string value = pRemoteCharacteristic->readValue();
      uint8_t res [100];
      int len = strlen(value.c_str());
      memcpy(res, value.c_str(), len );
      process_cmd(res, len);
    }
    if(pRemoteCharacteristic->canNotify())
      pRemoteCharacteristic->registerForNotify(notifyCallback);

    pRemoteCharacteristic2 = pRemoteService->getCharacteristic(charUUID_82);
    if (pRemoteCharacteristic2 == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(charUUID_81.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.println(" - Found our characteristic");

    if(pRemoteCharacteristic2->canRead()) {
      std::string value = pRemoteCharacteristic2->readValue();
      uint8_t res [100];
      int len = strlen(value.c_str());
      memcpy(res, value.c_str(), len );
      process_cmd(res, len);
    }
    if(pRemoteCharacteristic2->canNotify())
      pRemoteCharacteristic2->registerForNotify(notifyCallback);
    connected = true;
    return true;
}

class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    //Serial.print("BLE Advertised Device found: ");
    //Serial.println(advertisedDevice.toString().c_str());
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID_80)) {
      BLEDevice::getScan()->stop();
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      doConnect = true;
      doScan = true;

    }
  }
};

void process_cmd(uint8_t* pData, int length){
  Serial.print("Got: ");
        for(int i =0;i< length; i++){
          Serial.printf("%02X", pData[i]);
        } Serial.println();
}


void setup() {
  Serial.begin(115200);
  BLEDevice::init("");
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setInterval(1349);
  pBLEScan->setWindow(449);
  pBLEScan->setActiveScan(true);
  pBLEScan->start(5, false);
} 

uint32_t last_photo = 0;

void loop() {
  if (doConnect == true) {
    if (connectToServer()) {
      Serial.println("We are now connected to the BLE Server.");
    } else {
      Serial.println("We have failed to connect to the server; there is nothin more we will do.");
    }
    doConnect = false;
  }

  if (connected) {
    read_serial();

  }else if(doScan){
    BLEDevice::getScan()->start(0);  // this is just example to start scan after disconnect, most likely there is better way to do it in arduino
  }
  delay(500);
}

void read_serial(){
  int p = 0;
  char input[10];
  int charsRead;
  int val;
  charsRead = Serial.readBytesUntil('\n', input, 2);
  input[charsRead] = '\0';   
  if(charsRead > 0){
    p = (int) strtol(input, 0, 16);
    send_cmd(0x04, p, NULL, 0);
  }
}
      void take_photo(){
        send_cmd(0x04, 0x03, NULL, 0);
      }
      void stop_video(){
        send_cmd(0x04, 0x05, NULL, 0);
      }
      void start_video_hdr(){
        send_cmd(0x04, 0x33, NULL, 0);
      }
      void start_video_bullet(){
        send_cmd(0x04, 0x29, NULL, 0);
      }
      void start_video_timeshift(){
        send_cmd(0x04, 0x3D, NULL, 0);
      }
      void start_video_loop(){
        send_cmd(0x04, 0x45, NULL, 0);
      }
      void factory_reset(){
        send_cmd(0x04, 0x39, NULL, 0);
      }
      void format_sd(){
        send_cmd(0x04, 0x18, NULL, 0);
      }


      void send_cmd(uint8_t mode, uint8_t c1, uint8_t* pb, int pb_len){
        static uint32_t sn = 512;
        uint8_t cmd [200];
        int len = create_cmd(cmd, &sn, mode, c1, pb, pb_len);

        Serial.print("Send ");
        for(int i =0;i< len; i++){
          Serial.printf("%02X", cmd[i]);
        } Serial.println();

        pRemoteCharacteristic->writeValue(cmd, len);
      }

      int create_cmd (uint8_t* cmd, uint32_t* sn, uint8_t mode, uint8_t c1, uint8_t* pb, int pb_len){
        cmd[1] = 0;
        cmd[2] = 0;
        cmd[3] = 0;
        cmd[4] = mode;
        cmd[5] = 0;
        cmd[6] = 0;
        int len = 7;

        if(c1 != 0xFF){
          cmd[7] = c1;
          cmd[8] = 0;

          cmd[9] =  (uint8_t) (((*sn) & 0xFF00) >> 8);
          cmd[10] = (uint8_t) (((*sn) & 0x00FF));
          *sn +=1;
          cmd[11] = 0x00;
          cmd[12] = 0;
          cmd[13] = 0x80;
          cmd[14] = 0;
          cmd[15] = 0;
          len += 9;
        }

          for(int i = 0; i < pb_len; i++){
            cmd[i+16] = pb[i];
          } 

        cmd[0] = len + pb_len;
        return cmd[0];
      }